# 1.1 ターゲットと必須項目
#
# # makefileの書き方
#
# makefileにはプログラムを構築するための「ルール」が書かれている
#
# ## ルールの構成
#
# * ターゲット (target)
#     * ファイル or 何か作り出されるもの
# * 必須項目 (prereg)
#     * 依存項目とも言う
#     * ターゲットが作成される前に存在しなければならないファイルなど
# * 実行コマンド (commands)
#     * 必須項目からターゲットを作成するコマンド
#
# ```
# target: prereg1 prereg2
#     commands
# ```
#
# ### makeのルール解釈と実行の流れ
#
# 1. まずはルールの解釈段階
#     * ここではまだ実行しない
#     * ルールデータベースを構築する
# 2. 必須項目に列挙されているファイルを探す
#     * 存在しない場合は最新扱いされる
# 3. 必須項目の中で関連するルールが存在する場合は、そのルールを用いてファイルを更新する
#     * このような再帰を用いて、どんどん繰り返されていく
# 4. 必須項目の中でターゲットよりも新しいファイルが存在するなら、コマンドを実行してターゲットを再構築する
#     * 逆に新しくないなら、再構築はしない
# 5. コマンドは別のシェル（サブシェル）で実行される
# 6. エラーが発生した場合は、makeは終了する


# ここではまだ詳しく話さないが、
# 以下のようなMakefileで実行可能なファイル count_words が作成される。
#
# count_wordsの実行は、以下のコマンドを実行してみればわかる
#
# ```
# cat test.text | ./count_words
# ```
#
# 詳しくは次節以降で解説
# 本来であれば、中間ファイルは消すべきだが、
# まだMakefileの十分な機能を活かせていないので消していない。
# そのままリポジトリに突っ込むことにする

count_words: count_words.o lexer.o -lfl
	gcc count_words.o lexer.o -lfl -ocount_words

count_words.o: count_words.c
	gcc -c count_words.c

lexer.o: lexer.c
	gcc -c lexer.c

lexer.c: lexer.l
	flex -t lexer.l > lexer.c
