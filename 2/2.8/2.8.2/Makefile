# 2.8.2 ライブラリを必須項目として使う
#
# ## ライブラリを必須項目として使う
#
# ・ライブラリを必須項目とする場合、以下の２種類のうちどちらの指定でも構わない
#     - ファイル名を指定する
#     - -lオプションを使った記法
#
# ```
# # ファイル名記法
# xpong: $(OBJECTS) /lib/X11/libX11.a /lib/X11/libXaw.a
#     $(LINK) $^ -o $@
#
# # -lオプション
# xpong: $(OBJECTS) -lX11 -lXaw
#     $(LINK) $^ -o $@
# ```
#
# ・-lで指定されると、ライブラリ（できればシェアードライブラリ）を探し、絶対パスに置き換えて特殊変数にセットする
# ・システムのリンカが検索や優先の機能を提供しなくても、makeがそれをやってくれる
# ・検索範囲も自由に変更できる
# ・-lオプションで認識できるパターンは、.LIBPATTERNSに格納されている
#
#
# ## 小さな落とし穴
#
# ・Makefile内でターゲット指定したライブラリは、他のルールの必須項目で-l形式指定できない
# ・例）
#

count_words: count_words.o -lcounter -lfl

libcounter.a: libcounter.a(lexer.o) libcounter.a(counter.o)

# ・エラー
#
# ```
# make: *** No rule to make target `-lcounter', needed by `count_words'.  Stop.
# ```
#
# ・-lcounter を作るルールがありません
# ・makeが-lcounterのターゲットを探す際に、libXXX.aの形に展開せず、そのまま探そうとするから
# ・同じMakefile内で作成されるライブラリは、ファイル指定でなければならない
# ・-lオプションは、一回ライブラリディレクトリを探し、ライブラリファイルが存在しなければ、Makefileの中を探す。Makefileの中を探す場合、libXXX.aの展開は行われない。
#
#
# ## リンカ
#
# ・リンカはコマンドラインで指定された順番でライブラリを読み込もうとする
# ・シンボル：変数名、関数名、クラス名など
# ・順番が関係している例：
#     - ライブラリAが未解決のシンボルを持っている
#     - そのシンボルはライブラリBで定義されている
#     - 注意！「リンカは後戻りしない！」
#     - ライブラリB -> ライブラリA の順で読み込んだ
#         - アウト：Aを読み込んだ時に未解決のシンボルが存在するけど、誰も解決してくれない
#     - ライブラリA -> ライブラリB の順で読み込んだ
#         - セーフ：Aを読み込んだ時に未解決のシンボルが存在するけど、のちのライブラリBが解決してくれる
#     - 若干、直感に反するところがあるので注意
# ・順番は重要！
#
#
# ## 特殊変数への代入
#
# ・$^や$?に代入される際、順番は維持される


