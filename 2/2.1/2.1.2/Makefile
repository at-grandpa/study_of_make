# 2.1.2 擬似ターゲット
#
# ## 擬似ターゲット
#
# 実際のファイルを示していないターゲット
# allやcleanなど
#
#
# ## 必ず実行されるのか
#
# ・基本はされる
#   - コマンドがターゲットのファイルを作成しないため
#   - ファイルが存在しなかったら、makeはコマンドを実行してファイルを作ろうとする（作成できないけど）
# ・makeが擬似ターゲットとファイルターゲットを区別できないことは重要
#
# 【注意】
# ・もし、擬似ターゲットと同じ名前のファイルが存在した場合、依存関係グラフに関連付けてしまう
#
# 【解決策】
# ・.PHONY という特殊ターゲットを使う
#   - いかなるターゲットも擬似ターゲットになる
#
# ```
# .PHONY: crean
# clean:
#     rm -f *.o lexer.c
# ```
#
# ・これで、cleanというファイルが存在しても、コマンドが必ず実行される
# ・擬似ターゲットは常に「最新ではない」と判断される -> 再構築対象になる
#   - よって、擬似ターゲットを実在ファイルの必須項目に（普通は）しない
#   - 必須項目である擬似ターゲットは最新なので、実在ファイルの生成も必ず実行されてしまうから
#   - しかし、「そのターゲットの構築前に必ず実行したいスクリプト」は、その擬似ターゲットを必須項目として入れれば良い
# ・逆に、擬似ターゲットに必須項目を与えるのは有効
#   - all などは、プログラムのリストになる
#
#
# ## 擬似ターゲットの有用な例

.PHONY: make-documentation df

make-documentation: df
	@echo "any commands..."

df:
	df -kh . | awk 'NR == 2 { printf("%s available\n", $$4 ) }'

# ・残りのディスク容量がどれだけかを表示するターゲット
# ・dfを別に書いたのは、dfの出力フォーマットが異なる環境に移植した場合のことを考慮して
# ・他のターゲットでも、この出力スクリプトは使える
#
#
# ## makefileのユーザーインターフェースという役割
#
# ・通常、ターゲットはパス名やバージョン番号などを含む
# ・そのような文字列を、いちいちコマンドで打ってられない
# ・擬似ターゲットの必須項目に、目的のターゲットを置けば、makeコマンドが使いやすくなる
#
# 一般的な擬似ターゲット
#
# all      : アプリケーションを構築する全ての作業
# install  : コンパイル済みバイナリをインストール
# clean    : ソースから作られたバイナリを削除
# disclean : 元の配布物に含まれていなかった全ての生成物を削除
# TAGS     : エディタの使用するtagを作成する
# info     : Texinfoのソースより、GNU info ファイルを作成する
# check    : このアプリケーションに関するすべてのテストを実行する
#
# まぁ、絶対に使えというわけではない
