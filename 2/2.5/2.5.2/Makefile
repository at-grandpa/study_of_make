# 2.5.2 ルールの構造
#
# ## 組み込みルールの構造とカスタマイズの仕方
#
# ・カスタマイズが簡単にできるよう、ルールは簡単な構造になっている
# ・以下は、Cソースファイルからオブジェクトファイルを作成するルール
#
# ```
# %.o: %.c
#     $(COMPILE.c) $(OUTPUT_OPTION) $<
# ```
#
# ・ルールのカスタマイズは「変数の設定」により行う
# ・COMPILE.c はいくつか別の変数からできている
# ・その他の変数の内容も見てみる
#
# ```
# COMPILE.c = $(CC) $(CFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c
# CC = gcc
# OUTPUT_OPTION = -o $@
# ```
#
# ・CコンパイラはCCの値を変えることで、別のものにできる
# ・他の変数も設定することで、コマンドを変更できる
# ・これらの変数を設定するときは、十分な注意が必要
# ・不用意に変更してしまうと、makeのカスタマイズ能力を壊してしまう
# ・例）
#
# ```
# CPPFLAGS = -I project/include
# ```
#
# ・この設定がなされている状態で、他の利用者がcppの設定を追加しようと、以下のコマンドを実行した
#
# ```
# $ make CPPFLAGS=-DDEBUG
# ```
#
# ・コンパイルに必要な -I オプションを消してしまうことになる
# ・コマンドラインの変数設定は、その他の設定を上書きする
# ・Makefileで不適切にCPPFLAGSを設定したのがまずい
# ・この場合は、独自に追加する値をコンパイル変数に入れてしまうことを検討する
#
# ```
# COMPILE.c = $(CC) $(CFLAGS) $(INCLUDES) $(CPPFLAGS) $(TARGET_ARCH) -c
# INCLUDES = -I project/include
# ```
#
